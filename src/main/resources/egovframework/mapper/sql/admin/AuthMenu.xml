<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AuthMenuAdminDAO">

    <select id="findByAuthRoleAndMenuId" parameterType="authMenuEntity" resultType="authMenuEntity">
        /* sql : AuthMenuAdminDAO.findByAuthRoleAndMenuId */
        SELECT    A.AUTH_ID
                , A.AUTH_NM
                , COALESCE(B.USE_YN, 'N') AS USE_YN
                , TO_CHAR(B.UPDATED_AT, 'YYYY-MM-DD HH24:MI') AS UPDATED_AT
                , CASE WHEN UPDATED_ID IS NULL THEN ''
                       ELSE (SELECT USER_NM FROM USER_TB C WHERE C.USER_ID = B.UPDATED_ID)
                  END  AS UPDATED_NM
        FROM    (
                    SELECT  A.AUTH_ID
                            , A.AUTH_NM
                            , CASE WHEN ORD = '' OR ORD IS NULL THEN '999'
                                   ELSE ORD
                              END AS ORD
                    FROM    AUTH_TB A
                    WHERE   A.USE_YN = 'Y'
                    AND     A.AUTH_ROLE = #{auth_role}
        ) A
        LEFT OUTER  JOIN AUTH_MENU_TB B
                    ON A.AUTH_ID = B.AUTH_ID
                    AND B.MENU_ID = #{menu_id}
        ORDER BY    CAST(A.ORD AS INTEGER) ASC, A.AUTH_ID ASC
    </select>

    <insert id="save" parameterType="authMenu">
        /* sql : AuthMenuAdminDAO.save */
        WITH UPSERT AS (
        UPDATE  AUTH_MENU_TB
        SET     USE_YN = #{use_yn}
                , UPDATED_AT = now()
                , UPDATED_ID = #{updated_id}
        WHERE   AUTH_ID = #{auth_id}
        AND     MENU_ID = #{menu_id}
        RETURNING *
        )
        INSERT INTO AUTH_MENU_TB (AUTH_ID, MENU_ID, CREATED_AT, UPDATED_AT, UPDATED_ID, USE_YN)
        SELECT  #{auth_id}, #{menu_id}, now(), now(), #{updated_id}, #{use_yn}
        WHERE NOT EXISTS(SELECT * FROM UPSERT)
    </insert>


</mapper>